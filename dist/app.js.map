{"version":3,"file":"app.js","sourceRoot":"","sources":["../src/app.ts"],"names":[],"mappings":"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","sourcesContent":["import * as express from 'express';\nimport {NextFunction, Request, Response} from 'express';\nimport * as cors from 'cors';\nimport * as rateLimit from 'express-rate-limit';\nimport * as helmet from 'helmet';\nimport * as dotenv from 'dotenv';\nimport * as morgan from 'morgan';\nimport * as path from 'path';\nimport * as mongoose from 'mongoose';\nimport {config} from './config';\nimport {adminRouter} from './routes';\n\ndotenv.config();\n\n//rateLimit configure\nconst serverRequestLimit = rateLimit({\n    windowMs: config.serverRateLimits.period,\n    max: config.serverRateLimits.maxRequests\n});\n\nclass App {\n    public readonly app: express.Application = express();\n\n    constructor() {\n        (global as any).appRoot = path.resolve(process.cwd(), '../');\n        this.app.use(morgan('dev'));\n        this.app.use(helmet());\n        this.app.use(serverRequestLimit);\n        this.app.use(cors({\n            origin: this.configureCors\n        }));\n\n        this.app.use(express.json());\n        this.app.use(express.urlencoded(\n            {extended: true}));\n\n        this.app.use(express.static(\n            path.resolve((global as any).appRoot,\n                'public')));\n\n\n        this.app.use(this.customErrorHandler);\n        this.mountRoutes();\n        this.setupDB();\n    }\n\n    //setup mongo\n    private setupDB(): void {\n        mongoose.connect(config.MONGODB_URL, {\n            useUnifiedTopology: true,\n            useCreateIndex: true,\n            useNewUrlParser: true\n        });\n\n        mongoose.connection.on('error', console.log.bind(console, 'MONGO ERROR'));\n    }\n\n    //error handler\n    private customErrorHandler(err: any, req: Request, res: Response, next: NextFunction): void {\n        res\n            .status(err.status || 500)\n            .json({\n                message: err.message || 'Unknown Error',\n                code: err.code\n            });\n    }\n\n    private configureCors = (origin: any, callback: any) => {\n        const whiteList = config.ALLOWED_ORIGIN.split(';');\n\n        if (!origin) {\n            return callback(null, true);\n        }\n\n        if (!whiteList.includes(origin)) {\n            return callback(false, new Error('Cors not allowed'));\n        }\n\n        return callback(null, true);\n    }\n\n    private mountRoutes(): void {\n        this.app.use(`/admin`, adminRouter);\n    }\n\n}\n\nexport const app = new App().app;\n"]}